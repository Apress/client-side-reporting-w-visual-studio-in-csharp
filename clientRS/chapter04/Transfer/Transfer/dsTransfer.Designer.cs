//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Transfer {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsTransfer")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsTransfer : System.Data.DataSet {
        
        private dtTransferHeaderDataTable tabledtTransferHeader;
        
        private dtTransferDetailDataTable tabledtTransferDetail;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsTransfer() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsTransfer(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtTransferHeader"] != null)) {
                    base.Tables.Add(new dtTransferHeaderDataTable(ds.Tables["dtTransferHeader"]));
                }
                if ((ds.Tables["dtTransferDetail"] != null)) {
                    base.Tables.Add(new dtTransferDetailDataTable(ds.Tables["dtTransferDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtTransferHeaderDataTable dtTransferHeader {
            get {
                return this.tabledtTransferHeader;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtTransferDetailDataTable dtTransferDetail {
            get {
                return this.tabledtTransferDetail;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsTransfer cln = ((dsTransfer)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtTransferHeader"] != null)) {
                    base.Tables.Add(new dtTransferHeaderDataTable(ds.Tables["dtTransferHeader"]));
                }
                if ((ds.Tables["dtTransferDetail"] != null)) {
                    base.Tables.Add(new dtTransferDetailDataTable(ds.Tables["dtTransferDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtTransferHeader = ((dtTransferHeaderDataTable)(base.Tables["dtTransferHeader"]));
            if ((initTable == true)) {
                if ((this.tabledtTransferHeader != null)) {
                    this.tabledtTransferHeader.InitVars();
                }
            }
            this.tabledtTransferDetail = ((dtTransferDetailDataTable)(base.Tables["dtTransferDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtTransferDetail != null)) {
                    this.tabledtTransferDetail.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsTransfer";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsTransfer.xsd";
            this.EnforceConstraints = false;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtTransferHeader = new dtTransferHeaderDataTable();
            base.Tables.Add(this.tabledtTransferHeader);
            this.tabledtTransferDetail = new dtTransferDetailDataTable();
            base.Tables.Add(this.tabledtTransferDetail);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtTransferHeader() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtTransferDetail() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsTransfer ds = new dsTransfer();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void dtTransferHeaderRowChangeEventHandler(object sender, dtTransferHeaderRowChangeEvent e);
        
        public delegate void dtTransferDetailRowChangeEventHandler(object sender, dtTransferDetailRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtTransferHeaderDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTransferID;
            
            private System.Data.DataColumn columnDateOfTransfer;
            
            private System.Data.DataColumn columnFromBranch;
            
            private System.Data.DataColumn columnToBranch;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferHeaderDataTable() {
                this.TableName = "dtTransferHeader";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTransferHeaderDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtTransferHeaderDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TransferIDColumn {
                get {
                    return this.columnTransferID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DateOfTransferColumn {
                get {
                    return this.columnDateOfTransfer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FromBranchColumn {
                get {
                    return this.columnFromBranch;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ToBranchColumn {
                get {
                    return this.columnToBranch;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferHeaderRow this[int index] {
                get {
                    return ((dtTransferHeaderRow)(this.Rows[index]));
                }
            }
            
            public event dtTransferHeaderRowChangeEventHandler dtTransferHeaderRowChanging;
            
            public event dtTransferHeaderRowChangeEventHandler dtTransferHeaderRowChanged;
            
            public event dtTransferHeaderRowChangeEventHandler dtTransferHeaderRowDeleting;
            
            public event dtTransferHeaderRowChangeEventHandler dtTransferHeaderRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtTransferHeaderRow(dtTransferHeaderRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferHeaderRow AdddtTransferHeaderRow(string TransferID, System.DateTime DateOfTransfer, string FromBranch, string ToBranch) {
                dtTransferHeaderRow rowdtTransferHeaderRow = ((dtTransferHeaderRow)(this.NewRow()));
                rowdtTransferHeaderRow.ItemArray = new object[] {
                        TransferID,
                        DateOfTransfer,
                        FromBranch,
                        ToBranch};
                this.Rows.Add(rowdtTransferHeaderRow);
                return rowdtTransferHeaderRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                dtTransferHeaderDataTable cln = ((dtTransferHeaderDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new dtTransferHeaderDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTransferID = base.Columns["TransferID"];
                this.columnDateOfTransfer = base.Columns["DateOfTransfer"];
                this.columnFromBranch = base.Columns["FromBranch"];
                this.columnToBranch = base.Columns["ToBranch"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTransferID = new System.Data.DataColumn("TransferID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferID);
                this.columnDateOfTransfer = new System.Data.DataColumn("DateOfTransfer", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOfTransfer);
                this.columnFromBranch = new System.Data.DataColumn("FromBranch", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromBranch);
                this.columnToBranch = new System.Data.DataColumn("ToBranch", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnToBranch);
                this.columnTransferID.AllowDBNull = false;
                this.columnTransferID.MaxLength = 15;
                this.columnDateOfTransfer.AllowDBNull = false;
                this.columnFromBranch.AllowDBNull = false;
                this.columnFromBranch.MaxLength = 15;
                this.columnToBranch.AllowDBNull = false;
                this.columnToBranch.MaxLength = 15;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferHeaderRow NewdtTransferHeaderRow() {
                return ((dtTransferHeaderRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new dtTransferHeaderRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(dtTransferHeaderRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtTransferHeaderRowChanged != null)) {
                    this.dtTransferHeaderRowChanged(this, new dtTransferHeaderRowChangeEvent(((dtTransferHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtTransferHeaderRowChanging != null)) {
                    this.dtTransferHeaderRowChanging(this, new dtTransferHeaderRowChangeEvent(((dtTransferHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtTransferHeaderRowDeleted != null)) {
                    this.dtTransferHeaderRowDeleted(this, new dtTransferHeaderRowChangeEvent(((dtTransferHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtTransferHeaderRowDeleting != null)) {
                    this.dtTransferHeaderRowDeleting(this, new dtTransferHeaderRowChangeEvent(((dtTransferHeaderRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtTransferHeaderRow(dtTransferHeaderRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsTransfer ds = new dsTransfer();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtTransferHeaderDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtTransferDetailDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTransferID;
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnUnitQuantity;
            
            private System.Data.DataColumn columnUnitCost;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferDetailDataTable() {
                this.TableName = "dtTransferDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTransferDetailDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtTransferDetailDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TransferIDColumn {
                get {
                    return this.columnTransferID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitQuantityColumn {
                get {
                    return this.columnUnitQuantity;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UnitCostColumn {
                get {
                    return this.columnUnitCost;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferDetailRow this[int index] {
                get {
                    return ((dtTransferDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtTransferDetailRowChangeEventHandler dtTransferDetailRowChanging;
            
            public event dtTransferDetailRowChangeEventHandler dtTransferDetailRowChanged;
            
            public event dtTransferDetailRowChangeEventHandler dtTransferDetailRowDeleting;
            
            public event dtTransferDetailRowChangeEventHandler dtTransferDetailRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtTransferDetailRow(dtTransferDetailRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferDetailRow AdddtTransferDetailRow(string TransferID, string ProductID, string ProductName, int UnitQuantity, decimal UnitCost) {
                dtTransferDetailRow rowdtTransferDetailRow = ((dtTransferDetailRow)(this.NewRow()));
                rowdtTransferDetailRow.ItemArray = new object[] {
                        TransferID,
                        ProductID,
                        ProductName,
                        UnitQuantity,
                        UnitCost};
                this.Rows.Add(rowdtTransferDetailRow);
                return rowdtTransferDetailRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                dtTransferDetailDataTable cln = ((dtTransferDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new dtTransferDetailDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTransferID = base.Columns["TransferID"];
                this.columnProductID = base.Columns["ProductID"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnUnitQuantity = base.Columns["UnitQuantity"];
                this.columnUnitCost = base.Columns["UnitCost"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTransferID = new System.Data.DataColumn("TransferID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransferID);
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductID);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProductName);
                this.columnUnitQuantity = new System.Data.DataColumn("UnitQuantity", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitQuantity);
                this.columnUnitCost = new System.Data.DataColumn("UnitCost", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitCost);
                this.columnTransferID.AllowDBNull = false;
                this.columnTransferID.MaxLength = 15;
                this.columnProductID.AllowDBNull = false;
                this.columnProductID.MaxLength = 15;
                this.columnProductName.AllowDBNull = false;
                this.columnProductName.MaxLength = 50;
                this.columnUnitQuantity.AllowDBNull = false;
                this.columnUnitCost.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferDetailRow NewdtTransferDetailRow() {
                return ((dtTransferDetailRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new dtTransferDetailRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(dtTransferDetailRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtTransferDetailRowChanged != null)) {
                    this.dtTransferDetailRowChanged(this, new dtTransferDetailRowChangeEvent(((dtTransferDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtTransferDetailRowChanging != null)) {
                    this.dtTransferDetailRowChanging(this, new dtTransferDetailRowChangeEvent(((dtTransferDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtTransferDetailRowDeleted != null)) {
                    this.dtTransferDetailRowDeleted(this, new dtTransferDetailRowChangeEvent(((dtTransferDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtTransferDetailRowDeleting != null)) {
                    this.dtTransferDetailRowDeleting(this, new dtTransferDetailRowChangeEvent(((dtTransferDetailRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtTransferDetailRow(dtTransferDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsTransfer ds = new dsTransfer();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtTransferDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtTransferHeaderRow : System.Data.DataRow {
            
            private dtTransferHeaderDataTable tabledtTransferHeader;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTransferHeaderRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtTransferHeader = ((dtTransferHeaderDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferID {
                get {
                    return ((string)(this[this.tabledtTransferHeader.TransferIDColumn]));
                }
                set {
                    this[this.tabledtTransferHeader.TransferIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOfTransfer {
                get {
                    return ((System.DateTime)(this[this.tabledtTransferHeader.DateOfTransferColumn]));
                }
                set {
                    this[this.tabledtTransferHeader.DateOfTransferColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FromBranch {
                get {
                    return ((string)(this[this.tabledtTransferHeader.FromBranchColumn]));
                }
                set {
                    this[this.tabledtTransferHeader.FromBranchColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ToBranch {
                get {
                    return ((string)(this[this.tabledtTransferHeader.ToBranchColumn]));
                }
                set {
                    this[this.tabledtTransferHeader.ToBranchColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtTransferDetailRow : System.Data.DataRow {
            
            private dtTransferDetailDataTable tabledtTransferDetail;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTransferDetailRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtTransferDetail = ((dtTransferDetailDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TransferID {
                get {
                    return ((string)(this[this.tabledtTransferDetail.TransferIDColumn]));
                }
                set {
                    this[this.tabledtTransferDetail.TransferIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductID {
                get {
                    return ((string)(this[this.tabledtTransferDetail.ProductIDColumn]));
                }
                set {
                    this[this.tabledtTransferDetail.ProductIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProductName {
                get {
                    return ((string)(this[this.tabledtTransferDetail.ProductNameColumn]));
                }
                set {
                    this[this.tabledtTransferDetail.ProductNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UnitQuantity {
                get {
                    return ((int)(this[this.tabledtTransferDetail.UnitQuantityColumn]));
                }
                set {
                    this[this.tabledtTransferDetail.UnitQuantityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitCost {
                get {
                    return ((decimal)(this[this.tabledtTransferDetail.UnitCostColumn]));
                }
                set {
                    this[this.tabledtTransferDetail.UnitCostColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtTransferHeaderRowChangeEvent : System.EventArgs {
            
            private dtTransferHeaderRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferHeaderRowChangeEvent(dtTransferHeaderRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferHeaderRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtTransferDetailRowChangeEvent : System.EventArgs {
            
            private dtTransferDetailRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferDetailRowChangeEvent(dtTransferDetailRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTransferDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591